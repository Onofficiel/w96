//!wrt $BSPEC:{"cpr":"Onofficiel","icn":"mime/ts","dsc":"Typescript Compiler","frn":"Typescript Compiler","ver":1.2,"ssy":"cli"}

const { term, cwd } = this.boxedEnv;
if (!term) return;

class TypeScriptCompiler extends WApplication {
  /**
   * Application constructor.
   */
  constructor() {
    super();
  }

  /**
   * Main entry point.
   * @param {String[]} argv The program arguments.
   */
  async main(argv) {
    super.main(argv);

    const ts = await include("C:/local/tsc/TypescriptServices.js");

    const cmdReg = [
      {
        name: "run",
        exec: runFile,
        usage: "<path> - Execute a Typescript script from a file",
      },
      {
        name: "compile",
        exec: compileFile,
        usage: "<path> - Compile a Typescript script from a file",
      },
      {
        name: "help",
        exec: showHelp,
        usage: "[command] - Shows help",
      },
    ];

    function transpile(str) {
      let code = str;
      let shebang = null;

      if (code.startsWith("//!wrt")) {
        const splitted = code.split("\n");
        shebang = splitted[0];
        code = code.slice(code.indexOf("\n") + 1);
      }

      let result = ts.transpileModule(code, {
        compilerOptions: {
          module: ts.ModuleKind.None,
          target: ts.ScriptTarget.ES2015,
          noEmitOnError: true,
        },
        reportDiagnostics: true,
      });

      if (shebang) result.outputText = `${shebang}\n${result.outputText}`;

      if (result.diagnostics.length > 0) {
        result.diagnostics.forEach((d) => {
          term.writeln(`[compilation error]: ${d.messageText}`);
        });
      }

      return result;
    }

    // Function definitions:
    async function compileFile(argv) {
      if (!argv[0]) {
        term.writeln("\x1b[31mSpecify the path to the file\x1b[0m");
        return;
      }

      let path = FSUtil.resolvePath(cwd, argv[0]);

      if (!(await FS.exists(path))) {
        term.writeln("\x1b[31mThe specified file doesn't exist\x1b[0m");
        return;
      }

      if (!(await FS.isFile(path))) {
        term.writeln("\x1b[31mThe specified path isn't a file\x1b[0m");
        return;
      }

      const file = await FS.readstr(path);

      let result = transpile(file);

      let newPath = `${path.slice(
        0,
        path.lastIndexOf(".") < 0 ? path.length : path.lastIndexOf(".")
      )}.js`;

      let argIndex = argv.indexOf("-o");
      if (argIndex !== -1) {
        if (!argv[argIndex + 1]) {
          term.writeln("\x1b[31mA file name must be specified\x1b[0m");
          return;
        }
        newPath = FSUtil.resolvePath(cwd, argv[argIndex + 1]);
      }

      await FS.writestr(newPath, result.outputText);
      term.writeln(`Compiled with ${result.diagnostics.length} error(s).`);
    }

    async function runFile(argv) {
      if (!argv[0]) {
        term.writeln("\x1b[31mSpecify the path to the file\x1b[0m");
        return;
      }

      let path = FSUtil.resolvePath(cwd, argv[0]);

      if (!(await FS.exists(path))) {
        term.writeln("\x1b[31mThe specified file doesn't exist\x1b[0m");
        return;
      }

      if (!(await FS.isFile(path))) {
        term.writeln("\x1b[31mThe specified path isn't a file\x1b[0m");
        return;
      }

      const file = await FS.readstr(path);

      let result = transpile(file);

      try {
        await new Function(result.outputText)();
      } catch (err) {
        term.writeln(`\x1b[31m${err}\x1b[0m`);
      }
    }

    function showHelp(showTitle = 1) {
      if (!argv[2]) {
        if (showTitle) {
          term.writeln(
            ["\x1b[34mTypescript Compiler (tsc)", "\x1b[0m"].join("\n")
          );
        }
        term.writeln(
          ["Usage: tsc <command> [arguments]", "", "Commands:"].join("\n")
        );
        for (const cmd of cmdReg) {
          term.writeln(`    ${cmd.name} ${cmd.usage}`);
        }
        term.writeln("");
      } else {
        let i = 0;
        for (const cmd of cmdReg) {
          if (cmd.name === argv[2]) {
            term.writeln(`Usage: ${cmd.name} ${cmd.usage}`);
          } else if (++i >= cmdReg.length) {
            term.writeln(
              ["\x1b[31mCommand not found\x1b[0m", "Commands:"].join("\n")
            );
            for (const cmd of cmdReg) {
              term.writeln(`    ${cmd.name} ${cmd.usage}`);
            }
            term.writeln("");
          }
        }
      }
    }

    // Command handler:
    if (!argv[1]) {
      showHelp();
    } else {
      let i = 0;
      for await (const cmd of cmdReg) {
        if (cmd.name === argv[1]) {
          await cmd.exec(argv.slice(2));
        } else if (++i >= cmdReg.length) {
          await compileFile(argv.slice(1));
        }
      }
    }

    this.terminate();
  }
}

return await WApplication.execAsync(new TypeScriptCompiler(), this.boxedEnv.args, this);
